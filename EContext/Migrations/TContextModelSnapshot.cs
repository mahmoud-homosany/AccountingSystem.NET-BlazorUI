// <auto-generated />
using System;
using EContext.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EContext.Migrations
{
    [DbContext(typeof(TContext))]
    partial class TContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EContext.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.HasIndex(new[] { "AccountNumber" }, "IX_Accounts")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "AccountNumber" }, "IX_Accounts"), 80);

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            AccountNameAr = "ذمم بضاعة",
                            AccountNameEn = "Merchandise receivables",
                            AccountNumber = "1001",
                            BranchId = 1
                        },
                        new
                        {
                            Id = 1002,
                            AccountNameAr = "عهد",
                            AccountNameEn = "protection",
                            AccountNumber = "1002",
                            BranchId = 1
                        },
                        new
                        {
                            Id = 1003,
                            AccountNameAr = "الاصول",
                            AccountNameEn = "Assets",
                            AccountNumber = "1003",
                            BranchId = 1
                        });
                });

            modelBuilder.Entity("EContext.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchNameAr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchNameEn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchNameAr = "الاسكندرية",
                            BranchNameEn = "Alex"
                        });
                });

            modelBuilder.Entity("EContext.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CityNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 10001,
                            BranchId = 1,
                            CityNameAr = "جيزة",
                            CityNameEn = "Giza"
                        },
                        new
                        {
                            Id = 10002,
                            BranchId = 1,
                            CityNameAr = "القاهرة",
                            CityNameEn = "Cairo"
                        },
                        new
                        {
                            Id = 10003,
                            BranchId = 1,
                            CityNameAr = "الاسكندرية",
                            CityNameEn = "Alex"
                        });
                });

            modelBuilder.Entity("EContext.Models.Jv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Jvdate")
                        .HasColumnType("datetime")
                        .HasColumnName("JVDate");

                    b.Property<int?>("Jvno")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("JVNo");

                    b.Property<int?>("JvtypeId")
                        .HasColumnType("int")
                        .HasColumnName("JVTypeID");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReceiptNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalCredit")
                        .HasColumnType("numeric(22, 8)");

                    b.Property<decimal?>("TotalDebit")
                        .HasColumnType("numeric(22, 8)");

                    b.HasKey("Id")
                        .HasName("PK_GL");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.HasIndex("JvtypeId");

                    b.ToTable("JV");
                });

            modelBuilder.Entity("EContext.Models.Jvdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("numeric(22, 8)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("numeric(22, 8)");

                    b.Property<bool>("IsDocumented")
                        .HasColumnType("bit");

                    b.Property<int>("Jvid")
                        .HasColumnType("int")
                        .HasColumnName("JVID");

                    b.Property<decimal>("LocalCredit")
                        .HasColumnType("numeric(22, 8)");

                    b.Property<decimal>("LocalDebit")
                        .HasColumnType("numeric(22, 8)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SubAccountId")
                        .HasColumnType("int")
                        .HasColumnName("SubAccountID");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Jvid");

                    b.HasIndex("SubAccountId");

                    b.ToTable("JVDetails");
                });

            modelBuilder.Entity("EContext.Models.Jvtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JvtypeNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("JVTypeNameAr");

                    b.Property<string>("JvtypeNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("JVTypeNameEn");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.ToTable("JVTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            JvtypeNameEn = "Outgoing"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            JvtypeNameEn = "Sales"
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            JvtypeNameEn = "Payment"
                        });
                });

            modelBuilder.Entity("EContext.Models.SubAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("SubAccountNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubAccountNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubAccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SubAccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SubAccountTypeID");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SubAccountTypeId");

                    b.HasIndex(new[] { "SubAccountNumber" }, "IX_SubAccounts")
                        .IsUnique()
                        .HasFilter("[SubAccountNumber] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SubAccountNumber" }, "IX_SubAccounts"), 80);

                    b.ToTable("SubAccounts");
                });

            modelBuilder.Entity("EContext.Models.SubAccountsClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("ClientNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("numeric(18, 8)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDiscountTax")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SubAccountId")
                        .HasColumnType("int")
                        .HasColumnName("SubAccountID");

                    b.HasKey("Id")
                        .HasName("PK_Clients");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("SubAccountId");

                    b.ToTable("SubAccountsClient");
                });

            modelBuilder.Entity("EContext.Models.SubAccountsLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_SubAccLevels");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.HasIndex("BranchId");

                    b.ToTable("SubAccounts_Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            Width = 3
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            Width = 3
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            Width = 2
                        });
                });

            modelBuilder.Entity("EContext.Models.SubAccountsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubAccountTypeNameAr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubAccountTypeNameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 80);

                    b.ToTable("SubAccountsTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            SubAccountTypeNameAr = "عميل",
                            SubAccountTypeNameEn = "Clients"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            SubAccountTypeNameAr = "أخرى",
                            SubAccountTypeNameEn = "Other"
                        });
                });

            modelBuilder.Entity("EContext.Models.Account", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("Accounts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Accounts_Branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EContext.Models.City", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("Cities")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Cities_Branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EContext.Models.Jv", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("Jvs")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_JV_Branches");

                    b.HasOne("EContext.Models.Jvtype", "Jvtype")
                        .WithMany("Jvs")
                        .HasForeignKey("JvtypeId")
                        .HasConstraintName("FK_JV_JVTypes");

                    b.Navigation("Branch");

                    b.Navigation("Jvtype");
                });

            modelBuilder.Entity("EContext.Models.Jvdetail", b =>
                {
                    b.HasOne("EContext.Models.Account", "Account")
                        .WithMany("Jvdetails")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_JVDetails_Accounts");

                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("Jvdetails")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_JVDetails_Branches");

                    b.HasOne("EContext.Models.Jv", "Jv")
                        .WithMany("Jvdetails")
                        .HasForeignKey("Jvid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JVDetails_A_JV1");

                    b.HasOne("EContext.Models.SubAccount", "SubAccount")
                        .WithMany("Jvdetails")
                        .HasForeignKey("SubAccountId")
                        .HasConstraintName("FK_JVDetails_SubAccounts");

                    b.Navigation("Account");

                    b.Navigation("Branch");

                    b.Navigation("Jv");

                    b.Navigation("SubAccount");
                });

            modelBuilder.Entity("EContext.Models.Jvtype", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("Jvtypes")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_JVTypes_Branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EContext.Models.SubAccount", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("SubAccounts")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_SubAccounts_Branches");

                    b.HasOne("EContext.Models.SubAccountsLevel", "Level")
                        .WithMany("SubAccounts")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_SubAccounts_SubAccounts_Levels");

                    b.HasOne("EContext.Models.SubAccount", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_SubAccounts_SubAccounts");

                    b.HasOne("EContext.Models.SubAccountsType", "SubAccountType")
                        .WithMany("SubAccounts")
                        .HasForeignKey("SubAccountTypeId")
                        .HasConstraintName("FK_SubAccounts_SubAccountsTypes");

                    b.Navigation("Branch");

                    b.Navigation("Level");

                    b.Navigation("Parent");

                    b.Navigation("SubAccountType");
                });

            modelBuilder.Entity("EContext.Models.SubAccountsClient", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("SubAccountsClients")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_SubAccountsClient_Branches");

                    b.HasOne("EContext.Models.City", "City")
                        .WithMany("SubAccountsClients")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_SubAccountsClient_Cities");

                    b.HasOne("EContext.Models.SubAccount", "SubAccount")
                        .WithMany("SubAccountsClients")
                        .HasForeignKey("SubAccountId")
                        .HasConstraintName("FK_SubAccountsClient_SubAccounts");

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("SubAccount");
                });

            modelBuilder.Entity("EContext.Models.SubAccountsLevel", b =>
                {
                    b.HasOne("EContext.Models.Branch", "Branch")
                        .WithMany("SubAccountsLevels")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_SubAccounts_Levels_Branches");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("EContext.Models.Account", b =>
                {
                    b.Navigation("Jvdetails");
                });

            modelBuilder.Entity("EContext.Models.Branch", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Cities");

                    b.Navigation("Jvdetails");

                    b.Navigation("Jvs");

                    b.Navigation("Jvtypes");

                    b.Navigation("SubAccounts");

                    b.Navigation("SubAccountsClients");

                    b.Navigation("SubAccountsLevels");
                });

            modelBuilder.Entity("EContext.Models.City", b =>
                {
                    b.Navigation("SubAccountsClients");
                });

            modelBuilder.Entity("EContext.Models.Jv", b =>
                {
                    b.Navigation("Jvdetails");
                });

            modelBuilder.Entity("EContext.Models.Jvtype", b =>
                {
                    b.Navigation("Jvs");
                });

            modelBuilder.Entity("EContext.Models.SubAccount", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Jvdetails");

                    b.Navigation("SubAccountsClients");
                });

            modelBuilder.Entity("EContext.Models.SubAccountsLevel", b =>
                {
                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("EContext.Models.SubAccountsType", b =>
                {
                    b.Navigation("SubAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
