// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using EContext.Models;

namespace EContext.Models;

public partial class TContext : DbContext
{
    public TContext()
    {
    }

    public TContext(DbContextOptions<TContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Jv> Jvs { get; set; }

    public virtual DbSet<Jvdetail> Jvdetails { get; set; }

    public virtual DbSet<Jvtype> Jvtypes { get; set; }

    public virtual DbSet<SubAccount> SubAccounts { get; set; }

    public virtual DbSet<SubAccountsClient> SubAccountsClients { get; set; }

    public virtual DbSet<SubAccountsLevel> SubAccountsLevels { get; set; }

    public virtual DbSet<SubAccountsType> SubAccountsTypes { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-CJASPPN\\SQLEXPRESS;Initial Catalog=TaskACC;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.HasIndex(e => e.AccountNumber, "IX_Accounts")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Branch).WithMany(p => p.Accounts).HasConstraintName("FK_Accounts_Branches");
        });
        modelBuilder.Entity<Account>().HasData(
    new Account
    {
        Id = 1001,
        AccountNumber = "1001",
        AccountNameAr = "ذمم بضاعة",
        AccountNameEn = "Merchandise receivables",
        BranchId = 1
    },
    new Account
    {
        Id = 1002,
        AccountNumber = "1002",
        AccountNameAr = "عهد",
        AccountNameEn = "protection",
        BranchId = 1
    },
    new Account
    {
        Id = 1003,
        AccountNumber = "1003",
        AccountNameAr = "الاصول",
        AccountNameEn = "Assets",
        BranchId = 1
    }
);

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });
        modelBuilder.Entity<Branch>().HasData(
    new Branch
    {
        Id = 1,
        BranchNameAr = "الاسكندرية",
        BranchNameEn = "Alex"
    }
);

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Branch).WithMany(p => p.Cities).HasConstraintName("FK_Cities_Branches");
        });
        modelBuilder.Entity<City>().HasData(
    new City
    {
        Id = 10001,
        CityNameAr = "جيزة",
        CityNameEn = "Giza",
        BranchId = 1
    },
    new City
    {
        Id = 10002,
        CityNameAr = "القاهرة",
        CityNameEn = "Cairo",
        BranchId = 1
    },
    new City
    {
        Id = 10003,
        CityNameAr = "الاسكندرية",
        CityNameEn = "Alex",
        BranchId = 1
    }
);

        modelBuilder.Entity<Jv>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK_GL")
                .HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Branch).WithMany(p => p.Jvs).HasConstraintName("FK_JV_Branches");

            entity.HasOne(d => d.Jvtype).WithMany(p => p.Jvs).HasConstraintName("FK_JV_JVTypes");
        });

        modelBuilder.Entity<Jvdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.HasOne(d => d.Account).WithMany(p => p.Jvdetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JVDetails_Accounts");

            entity.HasOne(d => d.Branch).WithMany(p => p.Jvdetails).HasConstraintName("FK_JVDetails_Branches");

            entity.HasOne(d => d.Jv).WithMany(p => p.Jvdetails).HasConstraintName("FK_JVDetails_A_JV1");

            entity.HasOne(d => d.SubAccount).WithMany(p => p.Jvdetails).HasConstraintName("FK_JVDetails_SubAccounts");
        });

        modelBuilder.Entity<Jvtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Branch).WithMany(p => p.Jvtypes).HasConstraintName("FK_JVTypes_Branches");
        });
          modelBuilder.Entity<Jvtype>().HasData(
                 new Jvtype { Id = 1, JvtypeNameEn = "Outgoing", BranchId = 1 },
                 new Jvtype { Id = 2, JvtypeNameEn = "Sales", BranchId = 1 },
                 new Jvtype { Id = 3, JvtypeNameEn = "Payment", BranchId = 1 }
                
        );

        modelBuilder.Entity<SubAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.HasIndex(e => e.SubAccountNumber, "IX_SubAccounts")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Branch).WithMany(p => p.SubAccounts).HasConstraintName("FK_SubAccounts_Branches");

            entity.HasOne(d => d.Level).WithMany(p => p.SubAccounts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubAccounts_SubAccounts_Levels");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent).HasConstraintName("FK_SubAccounts_SubAccounts");

            entity.HasOne(d => d.SubAccountType).WithMany(p => p.SubAccounts).HasConstraintName("FK_SubAccounts_SubAccountsTypes");
        });

        modelBuilder.Entity<SubAccountsClient>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK_Clients")
                .HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.IsActive).HasDefaultValue(true);

            entity.HasOne(d => d.Branch).WithMany(p => p.SubAccountsClients).HasConstraintName("FK_SubAccountsClient_Branches");

            entity.HasOne(d => d.City).WithMany(p => p.SubAccountsClients).HasConstraintName("FK_SubAccountsClient_Cities");

            entity.HasOne(d => d.SubAccount).WithMany(p => p.SubAccountsClients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubAccountsClient_SubAccounts");
        });

        modelBuilder.Entity<SubAccountsLevel>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK_SubAccLevels")
                .HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Branch).WithMany(p => p.SubAccountsLevels).HasConstraintName("FK_SubAccounts_Levels_Branches");
        });
        modelBuilder.Entity<SubAccountsLevel>().HasData(
    new SubAccountsLevel
    {
        Id = 1,
        Width = 3,
        BranchId = 1
    },
    new SubAccountsLevel
    {
        Id = 2,
        Width = 3,
        BranchId = 1
    },
    new SubAccountsLevel
    {
        Id = 3,
        Width = 2,
        BranchId = 1
    }
);

        modelBuilder.Entity<SubAccountsType>(entity =>
        {
            entity.HasKey(e => e.Id).HasFillFactor(80);

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });
        modelBuilder.Entity<SubAccountsType>().HasData(
          new SubAccountsType
          {
              Id = 1,
              SubAccountTypeNameAr = "عميل",
              SubAccountTypeNameEn = "Clients",
              BranchId = 1
          },
      new SubAccountsType
      {
          Id = 2,
          SubAccountTypeNameAr = "أخرى",
          SubAccountTypeNameEn = "Other",
             BranchId = 1
      }
        );


        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}